Rank:
The rank of a node generally refers to the distance (the number of nodes including the leaf node) between the furthest leaf node and the current node. Basically rank includes all the nodes beneath the current node.
Ultimate parent:

The parent of a node generally refers to the node right above that particular node. But the ultimate parent refers to the topmost node or the root node.

Initial configuration:
rank array:This array is initialized with zero.
parent array: The array is initialized with the value of nodes i.e. parent[i] = i.
Union() BY RAANK->algorithm
1.Firstly, the Union function requires two nodes(let’s say u and v) as arguments. Then we will find the ultimate parent (using the findPar() function that is discussed later) of u and v. Let’s consider the ultimate parent of u is pu and the ultimate parent of v is pv.
2.After that, we will find the rank of pu and pv.
3.Finally, we will connect the ultimate parent with a smaller rank to the other ultimate parent with a larger rank. But if the ranks are equal, we can connect any parent to the other parent and we will increase the rank by one for the parent node to whom we have connected the other one.

=>Why we need to find the ultimate parents?
=>What is path compression?
Basically, connecting each node in a particular path to its ultimate parent refers.Using the path compression technique we can reduce the time complexity nearly to constant time

FindParent()->Algorithm
1.Base case: If the node and the parent of the node become the same, it will return the node.
2.We will call the findPar() function for a node until it hits the base case and while backtracking we will update the parent of the current node with the returned value.

=>In the union by rank method, why do we need to connect the smaller rank to the larger rank?
->shrinking the height of the graph.
->reducing the time complexity as much as we can.

Union() BY SIZE->algorithm
Initial configuration:

size array: This array is initialized with one.

parent array: The array is initialized with the value of nodes i.e. parent[i] = i.
 Algorithm 
1.Firstly, the Union function requires two nodes(let’s say u and v) as arguments. Then we will find the ultimate parent (using the findPar() function discussed earlier) of u and v. Let’s consider the ultimate parent of u is pu and the ultimate parent of v is pv.
2.After that, we will find the size of pu and pv i.e. size[pu] and size[pv].
3.Finally, we will connect the ultimate parent with a smaller size to the other ultimate parent with a larger size. But if the size of the two is equal, we can connect any parent to the other parent.
While connecting in both cases we will increase the size of the parent node to whom we have connected by the size of the other parent node which is actually connected.

Time Complexity:  The time complexity is O(4α) α is very small and close to 1. So, we can consider 4 as a constant.
